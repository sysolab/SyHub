#!/bin/bash
# /home/<YOUR_USER>/syhub/scripts/ap_sta_config.sh
# Modified script to configure simultaneous AP and Managed Mode Wifi on Raspberry Pi
# Based on https://github.com/MkLHX/AP_STA_RPI_SAME_WIFI_CHIP
# Modified by syHub setup script to use config.yml via environment variables

# --- Configuration Source: Environment Variables (Set by syhub.sh) ---
# SYHUB_AP_SSID
# SYHUB_AP_PASSWORD
# SYHUB_CLIENT_SSID
# SYHUB_CLIENT_PASSWORD
# SYHUB_COUNTRY_CODE
# SYHUB_AP_IP           # e.g., 192.168.77.1
# SYHUB_WIFI_MODE       # e.g., g
# SYHUB_AP_ONLY         # "true" or "false"
# SYHUB_STA_ONLY        # "true" or "false"
# SYHUB_NO_INTERNET     # "true" or "false"
# SYHUB_BASE_DIR        # /home/<user>/syhub
# SYHUB_HOSTNAME        # e.g., plantomio.local

# --- Safety ---
set -o errexit   # Exit immediately if a command exits with a non-zero status.
set -o pipefail  # Return value of a pipeline is the value of the last command to exit with a non-zero status.
set -o nounset   # Treat unset variables as an error when substituting.

# No color codes in logger for script execution logs
_logger() {
    echo "[ap_sta_config.sh] $(date +%Y%m%d-%T) ${1}" # Added timestamp
}

# --- Validate Required Environment Variables ---
# Validation is simplified as syhub.sh should guarantee these if network setup is requested
if [[ -z "${SYHUB_AP_SSID:-}" || -z "${SYHUB_CLIENT_SSID:-}" || -z "${SYHUB_COUNTRY_CODE:-}" || -z "${SYHUB_AP_IP:-}" ]]; then
    # Check flags for ap-only/sta-only scenarios if needed
    if [[ ("${SYHUB_AP_ONLY:-"false"}" != "true" || -z "${SYHUB_AP_SSID:-}") && \
          ("${SYHUB_STA_ONLY:-"false"}" != "true" || -z "${SYHUB_CLIENT_SSID:-}" || -z "${SYHUB_COUNTRY_CODE:-}") ]]; then
        _logger "ERROR: Missing required environment variables for configuration."
        _logger "Ensure SYHUB_AP_SSID, SYHUB_CLIENT_SSID, SYHUB_COUNTRY_CODE, SYHUB_AP_IP are set."
        exit 1
    fi
fi

# --- Set Variables from Environment ---
AP_SSID="${SYHUB_AP_SSID}"
AP_PASSPHRASE="${SYHUB_AP_PASSWORD:-}" # Allow empty password if not set in config
CLIENT_SSID="${SYHUB_CLIENT_SSID}"
CLIENT_PASSPHRASE="${SYHUB_CLIENT_PASSWORD:-}" # Allow empty password if not set in config
COUNTRY_CODE="${SYHUB_COUNTRY_CODE}"
AP_IP="${SYHUB_AP_IP}"
WIFI_MODE="${SYHUB_WIFI_MODE:-'g'}"       # Default 'g' if not set
AP_ONLY="${SYHUB_AP_ONLY:-"false"}"
STA_ONLY="${SYHUB_STA_ONLY:-"false"}"
NO_INTERNET="${SYHUB_NO_INTERNET:-"false"}" # Controls IP forwarding/NAT
SYHUB_HOSTNAME="${SYHUB_HOSTNAME:-syhub.local}" # Fallback hostname

# Derive AP_IP_BEGIN for dnsmasq range (assumes /24 mask)
AP_IP_BEGIN=$(echo "${AP_IP}" | sed -e 's/\.[0-9]\{1,3\}$//g')

# Get MAC address of wlan0
if [[ -e /sys/class/net/wlan0/address ]]; then
    MAC_ADDRESS="$(cat /sys/class/net/wlan0/address)"
else
     _logger "ERROR: Could not get MAC address for wlan0. Interface might not exist or be up."
     exit 1
fi


_logger "Configuring AP+STA using parameters:"
_logger "  AP SSID: $AP_SSID"
_logger "  STA SSID: $CLIENT_SSID"
_logger "  Country: $COUNTRY_CODE"
_logger "  AP IP: $AP_IP"
_logger "  WiFi Mode: $WIFI_MODE"
_logger "  AP Only: $AP_ONLY, STA Only: $STA_ONLY, No Internet: $NO_INTERNET"

# --- Check Prerequisites (Basic) ---
if [ $(id -u) != 0 ]; then
    _logger "ERROR: This script must be run as root."
    exit 1
fi

# --- Populate Configuration Files ---

# Populate `/etc/udev/rules.d/70-persistent-net.rules` (Needed for ap0 virtual interface)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /etc/udev/rules.d/70-persistent-net.rules"
    # Check if file exists and differs before overwriting
    RULES_CONTENT=$(cat <<EOF
SUBSYSTEM=="ieee80211", ACTION=="add|change", ATTR{macaddress}=="${MAC_ADDRESS}", KERNEL=="phy0", \\
RUN+="/sbin/iw phy phy0 interface add ap0 type __ap", \\
RUN+="/bin/ip link set ap0 address ${MAC_ADDRESS}"
EOF
)
    if [[ ! -f /etc/udev/rules.d/70-persistent-net.rules ]] || ! cmp -s <(echo "$RULES_CONTENT") /etc/udev/rules.d/70-persistent-net.rules; then
        echo "$RULES_CONTENT" > /etc/udev/rules.d/70-persistent-net.rules
        _logger "Updated /etc/udev/rules.d/70-persistent-net.rules"
        # Trigger udev rules reload? Could cause temporary network disruption.
        # udevadm control --reload-rules && udevadm trigger
    else
        _logger "/etc/udev/rules.d/70-persistent-net.rules is up-to-date."
    fi
fi

# Populate `/etc/dnsmasq.d/01-syhub-ap.conf` (DHCP/DNS for AP)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /etc/dnsmasq.d/01-syhub-ap.conf"
    DNSMASQ_CONTENT=$(cat <<EOF
# syHub AP DHCP/DNS configuration
# Generated by ap_sta_config.sh
interface=ap0
no-dhcp-interface=wlan0
server=8.8.8.8          # Default upstream DNS
domain=${SYHUB_HOSTNAME}
dhcp-range=${AP_IP_BEGIN}.50,${AP_IP_BEGIN}.150,12h
dhcp-option=option:router,${AP_IP}
dhcp-option=option:dns-server,${AP_IP}
# log-queries # Uncomment for debugging
# log-dhcp    # Uncomment for debugging
EOF
)
    if [[ ! -f /etc/dnsmasq.d/01-syhub-ap.conf ]] || ! cmp -s <(echo "$DNSMASQ_CONTENT") /etc/dnsmasq.d/01-syhub-ap.conf; then
        echo "$DNSMASQ_CONTENT" > /etc/dnsmasq.d/01-syhub-ap.conf
        chmod 644 /etc/dnsmasq.d/01-syhub-ap.conf
        _logger "Updated /etc/dnsmasq.d/01-syhub-ap.conf"
    else
         _logger "/etc/dnsmasq.d/01-syhub-ap.conf is up-to-date."
    fi
fi

# Populate `/etc/hostapd/hostapd.conf` (AP Configuration)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /etc/hostapd/hostapd.conf"
    HOSTAPD_CONTENT=$(cat <<EOF
# syHub Hostapd configuration
# Generated by ap_sta_config.sh
ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
interface=ap0
driver=nl80211
ssid=${AP_SSID}
hw_mode=${WIFI_MODE}
channel=11
country_code=${COUNTRY_CODE}
ieee80211n=1
wmm_enabled=1
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
$([ -n "${AP_PASSPHRASE}" ] && echo "wpa_passphrase=${AP_PASSPHRASE}")
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP
EOF
)
    if [[ ! -f /etc/hostapd/hostapd.conf ]] || ! cmp -s <(echo "$HOSTAPD_CONTENT") /etc/hostapd/hostapd.conf; then
        echo "$HOSTAPD_CONTENT" > /etc/hostapd/hostapd.conf
        chmod 600 /etc/hostapd/hostapd.conf
        _logger "Updated /etc/hostapd/hostapd.conf"
    else
        _logger "/etc/hostapd/hostapd.conf is up-to-date."
    fi
fi

# Populate `/etc/default/hostapd` (Daemon defaults)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /etc/default/hostapd"
    HOSTAPD_DEFAULT_CONTENT=$(cat <<EOF
# syHub Hostapd defaults
# Generated by ap_sta_config.sh
DAEMON_CONF="/etc/hostapd/hostapd.conf"
EOF
)
    if [[ ! -f /etc/default/hostapd ]] || ! cmp -s <(echo "$HOSTAPD_DEFAULT_CONTENT") /etc/default/hostapd; then
        echo "$HOSTAPD_DEFAULT_CONTENT" > /etc/default/hostapd
        _logger "Updated /etc/default/hostapd"
    else
         _logger "/etc/default/hostapd is up-to-date."
    fi
fi

# Populate `/etc/wpa_supplicant/wpa_supplicant.conf` (STA Configuration)
if [[ "${AP_ONLY}" != "true" ]]; then
    _logger "Populate /etc/wpa_supplicant/wpa_supplicant.conf"
    WPA_CONTENT=$(cat <<EOF
# syHub WPA Supplicant configuration (STA Mode)
# Generated by ap_sta_config.sh
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=${COUNTRY_CODE}
network={
    ssid="${CLIENT_SSID}"
    $([ -n "${CLIENT_PASSPHRASE}" ] && echo "psk=\"${CLIENT_PASSPHRASE}\"")
    id_str="STA1"
    scan_ssid=1
}
EOF
)
    if [[ ! -f /etc/wpa_supplicant/wpa_supplicant.conf ]] || ! cmp -s <(echo "$WPA_CONTENT") /etc/wpa_supplicant/wpa_supplicant.conf; then
        echo "$WPA_CONTENT" > /etc/wpa_supplicant/wpa_supplicant.conf
        chown root:root /etc/wpa_supplicant/wpa_supplicant.conf
        chmod 600 /etc/wpa_supplicant/wpa_supplicant.conf
        _logger "Updated /etc/wpa_supplicant/wpa_supplicant.conf"
    else
         _logger "/etc/wpa_supplicant/wpa_supplicant.conf is up-to-date."
    fi
fi

# Populate `/etc/network/interfaces` (Defining Interfaces)
_logger "Populate /etc/network/interfaces (WARNING: This might conflict with dhcpcd)"
INTERFACES_CONTENT=$(cat <<EOF
# syHub network interfaces
# Generated by ap_sta_config.sh
# WARNING: This file is managed by syHub and may conflict with default OS network services like dhcpcd.

source-directory /etc/network/interfaces.d

auto lo
auto wlan0

iface lo inet loopback

# Configuration for the Access Point interface (ap0)
allow-hotplug ap0
iface ap0 inet static
    address ${AP_IP}
    netmask 255.255.255.0

# Configuration for the Station interface (wlan0)
allow-hotplug wlan0
iface wlan0 inet manual
    wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface STA1 inet dhcp
EOF
)
 if [[ ! -f /etc/network/interfaces ]] || ! cmp -s <(echo "$INTERFACES_CONTENT") /etc/network/interfaces; then
    echo "$INTERFACES_CONTENT" > /etc/network/interfaces
    chown root:root /etc/network/interfaces
    chmod 644 /etc/network/interfaces
    _logger "Updated /etc/network/interfaces"
else
    _logger "/etc/network/interfaces is up-to-date."
fi


# Populate `/bin/manage-ap0-iface.sh` (Hostapd helper script)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /bin/manage-ap0-iface.sh"
    MANAGE_AP0_SCRIPT=$(cat <<'EOF' # Use 'EOF' to prevent variable expansion inside heredoc
#!/bin/bash
# syHub Hostapd AP0 Interface Management Script
# Generated by ap_sta_config.sh
set -o errexit
set -o pipefail
set -o nounset
log_ap0_manage() { echo "[ap0_manage.sh] $(date +%Y%m%d-%T) $1"; }
log_ap0_manage "Checking hostapd service status..."
if systemctl is-active --quiet hostapd; then
    log_ap0_manage "hostapd service is active. No action needed."
else
    log_ap0_manage "hostapd service is not active. Checking for /var/run/hostapd/ap0 file."
    if [[ -e /var/run/hostapd/ap0 ]]; then
        log_ap0_manage "/var/run/hostapd/ap0 exists. Attempting to remove it."
        rm -f /var/run/hostapd/ap0
        if [[ -e /var/run/hostapd/ap0 ]]; then
             log_ap0_manage "WARNING: Failed to remove /var/run/hostapd/ap0."
        else
             log_ap0_manage "/var/run/hostapd/ap0 removed. Restarting hostapd service."
             systemctl restart hostapd || log_ap0_manage "ERROR: Failed to restart hostapd after removing /var/run/hostapd/ap0."
        fi
    else
        log_ap0_manage "/var/run/hostapd/ap0 does not exist. Hostapd failure likely elsewhere."
    fi
fi
EOF
)
    if [[ ! -f /bin/manage-ap0-iface.sh ]] || ! cmp -s <(echo "$MANAGE_AP0_SCRIPT") /bin/manage-ap0-iface.sh; then
        echo "$MANAGE_AP0_SCRIPT" > /bin/manage-ap0-iface.sh
        chmod +x /bin/manage-ap0-iface.sh
        _logger "Updated /bin/manage-ap0-iface.sh"
    else
        _logger "/bin/manage-ap0-iface.sh is up-to-date."
    fi
fi


# Populate `/bin/rpi-wifi.sh` (Main WiFi Startup Script)
if [[ "${STA_ONLY}" != "true" ]]; then
    _logger "Populate /bin/rpi-wifi.sh"
    # Define script content with variable expansion for AP_IP_BEGIN
    # Use 'EOF' for the outer heredoc, allow inner heredoc expansion
    RPI_WIFI_SCRIPT=$(cat <<EOF
#!/bin/bash
# syHub WiFi Startup Script
# Generated by ap_sta_config.sh
set -o errexit
set -o pipefail
set -o nounset
log_rpi_wifi() { echo "[rpi_wifi.sh] \$(date +%Y%m%d-%T) \$1"; }
log_rpi_wifi "Starting Wifi AP and STA client interfaces..."
log_rpi_wifi "Bringing down wlan0 and ap0..."
/usr/sbin/ifdown --force wlan0 || log_rpi_wifi "WARNING: ifdown wlan0 failed."
/usr/sbin/ifdown --force ap0 || log_rpi_wifi "WARNING: ifdown ap0 failed."
log_rpi_wifi "Bringing up ap0..."
/usr/sbin/ifup --force ap0 || { log_rpi_wifi "ERROR: Failed to bring up ap0."; exit 1; }
log_rpi_wifi "Bringing up wlan0..."
/usr/sbin/ifup --force wlan0 || log_rpi_wifi "WARNING: Failed to bring up wlan0 (STA)."

# --- Internet Sharing (NAT/IP Forwarding) ---
$([ "${NO_INTERNET}" != "true" ] && cat <<IEOF # Use IEOF for inner heredoc
log_rpi_wifi "Enabling IP forwarding and NAT..."
/usr/sbin/sysctl -w net.ipv4.ip_forward=1 || log_rpi_wifi "WARNING: Failed to enable IP forwarding."
OUTBOUND_INTERFACE="\$(ip route get 8.8.8.8 | awk '{print \$5}' | head -n 1)"
if [[ -z "\$OUTBOUND_INTERFACE" ]]; then
    log_rpi_wifi "WARNING: Could not determine default outbound interface for NAT rule."
else
    log_rpi_wifi "Setting up NAT rule for outbound interface: \$OUTBOUND_INTERFACE"
    if ! /usr/sbin/iptables -t nat -C POSTROUTING -s ${AP_IP_BEGIN}.0/24 ! -d ${AP_IP_BEGIN}.0/24 -o \$OUTBOUND_INTERFACE -j MASQUERADE 2>/dev/null; then
         log_rpi_wifi "Adding NAT rule..."
         /usr/sbin/iptables -t nat -A POSTROUTING -s ${AP_IP_BEGIN}.0/24 ! -d ${AP_IP_BEGIN}.0/24 -o \$OUTBOUND_INTERFACE -j MASQUERADE || log_rpi_wifi "ERROR: Failed to add NAT rule."
    else
         log_rpi_wifi "NAT rule already exists."
    fi
fi
log_rpi_wifi "Restarting dnsmasq service..."
/usr/bin/systemctl restart dnsmasq || log_rpi_wifi "ERROR: Failed to restart dnsmasq."
IEOF
)
log_rpi_wifi "Requesting wpa_supplicant reconfigure in 5sec..."
/usr/bin/sleep 5
/usr/sbin/wpa_cli -i wlan0 reconfigure || log_rpi_wifi "WARNING: wpa_cli reconfigure failed. STA connection might not work."
log_rpi_wifi "Wifi startup script finished."
EOF
)
    if [[ ! -f /bin/rpi-wifi.sh ]] || ! cmp -s <(echo "$RPI_WIFI_SCRIPT") /bin/rpi-wifi.sh; then
        echo "$RPI_WIFI_SCRIPT" > /bin/rpi-wifi.sh
        chmod +x /bin/rpi-wifi.sh
        _logger "Updated /bin/rpi-wifi.sh"
    else
        _logger "/bin/rpi-wifi.sh is up-to-date."
    fi

fi

# Service management (unmask/enable) is handled by syhub.sh

_logger "ap_sta_config.sh finished."